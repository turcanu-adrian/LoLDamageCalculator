// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230312105813_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Champion.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AppliesOnHits")
                        .HasColumnType("bit");

                    b.Property<int?>("ChampionId")
                        .HasColumnType("int");

                    b.Property<string>("Cooldown")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DamageType")
                        .HasColumnType("int");

                    b.Property<double>("Level")
                        .HasColumnType("float");

                    b.Property<string>("ManaCost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OnHitScaling")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ChampionId");

                    b.ToTable("Ability");
                });

            modelBuilder.Entity("Domain.Champion.AbilityScaling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AbilityId")
                        .HasColumnType("int");

                    b.Property<double>("Base")
                        .HasColumnType("float");

                    b.Property<double>("Bonus")
                        .HasColumnType("float");

                    b.Property<double>("Missing")
                        .HasColumnType("float");

                    b.Property<int>("StatType")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.ToTable("AbilityScaling");
                });

            modelBuilder.Entity("Domain.Champion.Champion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Champions");
                });

            modelBuilder.Entity("Domain.Champion.ChampionStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("BaseValue")
                        .HasColumnType("float");

                    b.Property<int?>("ChampionId")
                        .HasColumnType("int");

                    b.Property<double>("GrowthValue")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChampionId");

                    b.ToTable("ChampionStat");
                });

            modelBuilder.Entity("Domain.Champion.Ability", b =>
                {
                    b.HasOne("Domain.Champion.Champion", null)
                        .WithMany("ChampionAbilities")
                        .HasForeignKey("ChampionId");
                });

            modelBuilder.Entity("Domain.Champion.AbilityScaling", b =>
                {
                    b.HasOne("Domain.Champion.Ability", null)
                        .WithMany("AbilityScalings")
                        .HasForeignKey("AbilityId");
                });

            modelBuilder.Entity("Domain.Champion.ChampionStat", b =>
                {
                    b.HasOne("Domain.Champion.Champion", null)
                        .WithMany("ChampionStats")
                        .HasForeignKey("ChampionId");
                });

            modelBuilder.Entity("Domain.Champion.Ability", b =>
                {
                    b.Navigation("AbilityScalings");
                });

            modelBuilder.Entity("Domain.Champion.Champion", b =>
                {
                    b.Navigation("ChampionAbilities");

                    b.Navigation("ChampionStats");
                });
#pragma warning restore 612, 618
        }
    }
}
